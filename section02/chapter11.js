// 동기와 비동기
// 동기란? : 여러개의 작업이 있을 때, 순서대로 한번에 하나씩 작업을 처리하는 것 (보통 위에서 아래로 순서대로 실행)
// JavaScript는 기본적으로 "동기"적으로 코드를 실행한다.
// 동기 방식에는 치명적인 단점이 존재한다.
// -> 만약 작업 1, 2, 3 이 존재한다고 했을때, 작업 1과 3은 0.3초 작업 2는 10초 걸린다고 하면 작업 3을 처리하기 위해 2의 처리시간을 모두 기다려야 함... -> 전체 프로그램 성능 악화로 이어짐
// 단점을 해결하기 위해 멀티쓰레드를 활용할 수 있다. 하지만, JavaScript 엔진에는 쓰레드가 1개밖에 없어서 이 방식으로는 문제해결이 불가능하다... -> 비동기 방식으로 해결 가능

// 비동기란? : 동기적이지 않다는 뜻, 작업을 순서대로 처리하지 않음
// 앞선 작업이 종료되지 않아도 다른 작업을 동시에 진행시키는 것이 가능하다.
// 각각의 작업들이 종료되었을 때, 그 결과값을 또다른 작업에 이용해야 한다면 그 결과값을 callback 함수를 통해 받아서 활용할 수 있다.

console.log(1);
setTimeout(() => { //setTimeout을 이용하면 코드가 특정시간이 지난 후 로드되도록 비동기적으로 실행되도록 할 수 있다.
    console.log(2);
}, 3000);
console.log(3);
// setTimeout(() => {}, 3000); => (콜백함수, 밀리세컨드) 의 형식으로 입력한다.

// 분명 JavaScript는 쓰레드가 1개라고 했는데 어떻게 동시에 여러 작업을 처리할 수 있는지?
// -> JavaScript의 비동기 작업들은 JavaScript 엔진이 아닌 브라우저 영역의 Web APIs에서 실행되기 때문임.
// -> 순차적으로 실행하던 중 비동기함수를 발견하면 비동기 작업들을 Web APIs에 넘기고 다음 줄을 다시 실행한다. Web APIs 는 그 사이 연산을 진행 후 반환되는 콜백함수를 다시 반환해준다.